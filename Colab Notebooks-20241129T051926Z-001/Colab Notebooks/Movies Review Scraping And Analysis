{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPCxYnzy/kM/NAkVaxHzPLR"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import requests\n","from bs4 import BeautifulSoup\n","\n","# Step 1: Define the URL of the movie's IMDb page\n","url = 'https://www.imdb.com/title/tt0111161/reviews'  # Example: The Shawshank Redemption reviews page\n","\n","# Step 2: Send a GET request to fetch the page content\n","response = requests.get(url)\n","soup = BeautifulSoup(response.text, 'html.parser')\n","\n","# Step 3: Parse and extract reviews from the page\n","reviews = []\n","\n","# Example: IMDb reviews are usually contained in <span class=\"sc-16ede1cd-2 gGIuBz\">\n","# (check the page structure for the exact class for reviews)\n","\n","review_elements = soup.find_all('div', class_='text show-more__control')  # Adjust based on actual structure\n","\n","for review in review_elements:\n","    reviews.append(review.get_text())\n","\n","# Step 4: Print the reviews\n","for idx, review in enumerate(reviews, 1):\n","    print(f\"Review {idx}: {review}\\n\")\n"],"metadata":{"id":"maFdnMV9RU4z","executionInfo":{"status":"ok","timestamp":1732856178927,"user_tz":-330,"elapsed":1750,"user":{"displayName":"Priyanka Dakkata","userId":"02531916807305108102"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["pip install textblob\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fVQ0hAa6RYNl","executionInfo":{"status":"ok","timestamp":1732856189993,"user_tz":-330,"elapsed":11071,"user":{"displayName":"Priyanka Dakkata","userId":"02531916807305108102"}},"outputId":"43b5cca7-a442-4e84-e828-20164d24eb81"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: textblob in /usr/local/lib/python3.10/dist-packages (0.17.1)\n","Requirement already satisfied: nltk>=3.1 in /usr/local/lib/python3.10/dist-packages (from textblob) (3.9.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (8.1.7)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (1.4.2)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (2024.9.11)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from nltk>=3.1->textblob) (4.66.6)\n"]}]},{"cell_type":"code","source":["from textblob import TextBlob\n","\n","# Example: Analyzing sentiment of a review\n","def analyze_sentiment(review):\n","    # Create a TextBlob object\n","    blob = TextBlob(review)\n","    # Get the polarity (how positive or negative the review is)\n","    sentiment = blob.sentiment.polarity\n","    return sentiment\n","\n","# Example usage\n","for review in reviews:\n","    sentiment = analyze_sentiment(review)\n","    print(f\"Sentiment Score: {sentiment}, Review: {review}\")\n"],"metadata":{"id":"65g1u-H4RaDP","executionInfo":{"status":"ok","timestamp":1732856201320,"user_tz":-330,"elapsed":11342,"user":{"displayName":"Priyanka Dakkata","userId":"02531916807305108102"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["pip install matplotlib seaborn\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L77hvkwLRc96","executionInfo":{"status":"ok","timestamp":1732856205755,"user_tz":-330,"elapsed":4440,"user":{"displayName":"Priyanka Dakkata","userId":"02531916807305108102"}},"outputId":"c57c7536-31d6-4b0b-e7d6-1e866c41bc9b"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.8.0)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.13.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.55.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\n","Requirement already satisfied: numpy<2,>=1.21 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.2)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (11.0.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.2.0)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.10/dist-packages (from seaborn) (2.2.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.2->seaborn) (2024.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# List to store sentiment scores\n","sentiment_scores = [analyze_sentiment(review) for review in reviews]\n","\n","# Plot the distribution of sentiment\n","sns.histplot(sentiment_scores, kde=True, bins=20, color='blue')\n","plt.title(\"Sentiment Distribution of Reviews\")\n","plt.xlabel(\"Sentiment Score\")\n","plt.ylabel(\"Frequency\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"T-MJLpCRRfkW","executionInfo":{"status":"ok","timestamp":1732856207188,"user_tz":-330,"elapsed":1439,"user":{"displayName":"Priyanka Dakkata","userId":"02531916807305108102"}},"outputId":"1a3b298c-18b4-4eb2-ff8c-1e6a8071650a"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from collections import Counter\n","import re\n","\n","# Combine all reviews into one large string\n","all_reviews = \" \".join(reviews)\n","\n","# Remove non-alphabetic characters and split into words\n","words = re.findall(r'\\b\\w+\\b', all_reviews.lower())\n","\n","# Get the most common words\n","word_counts = Counter(words)\n","\n","# Display the top 10 most common words\n","print(word_counts.most_common(10))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q9_fWHa3RisP","executionInfo":{"status":"ok","timestamp":1732856207188,"user_tz":-330,"elapsed":8,"user":{"displayName":"Priyanka Dakkata","userId":"02531916807305108102"}},"outputId":"3f67d747-e1e3-4b3b-854e-90902ddaf730"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["[]\n"]}]}]}